<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-01T18:14:10+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Lagrange</title><subtitle>a minimalist Jekyll theme</subtitle><author><name>Paul Le</name></author><entry><title type="html">Oracle separation of PSPACE and PH</title><link href="http://localhost:4000/blog/oracle-sep.html" rel="alternate" type="text/html" title="Oracle separation of PSPACE and PH" /><published>2019-12-01T00:00:00+05:30</published><updated>2019-12-01T00:00:00+05:30</updated><id>http://localhost:4000/blog/oracle-sep</id><content type="html" xml:base="http://localhost:4000/blog/oracle-sep.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;An important aspect of complexity theory is to try and find separations between different complexity classes. That is, to show that two complexity classes are not equal. One type of separation is a strict containment. It turns out that it is easier to prove containments (for example, give two complexity classes &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;&lt;/script&gt;, to show that &lt;script type=&quot;math/tex&quot;&gt;A \subseteq B&lt;/script&gt;, or the opposite, whichever one is true) but to show a strict containment (&lt;script type=&quot;math/tex&quot;&gt;A \subset B&lt;/script&gt;) is more difficult (&lt;script type=&quot;math/tex&quot;&gt;\mathbf{P}&lt;/script&gt; vs &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt; being the best example of this). Obviously, a strict containment implies a separation between the two classes, but a containment doesn’t.&lt;/p&gt;

&lt;p&gt;So if strict containments are harder to prove, what can we do? One strategy is to try to solve a simpler, related problem: oracle separations. Oracle separations do not imply an actual separation between classes, but one can think of them as a ‘necessary condition’ for it. That is, if a separation indeed exists between two complexity classes, then there definitely exists an oracle separation between them.&lt;/p&gt;

&lt;p&gt;The paper I’m going to describe in this post shows an oracle separation between the classes &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH}&lt;/script&gt; and  &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PSPACE}&lt;/script&gt;, by proving a lower bound on a certain type of boolean circuits, which was a completely original idea at that time. Since then, others have used the idea to show many other interesting results too.&lt;/p&gt;

&lt;h2 id=&quot;main-result&quot;&gt;Main result&lt;/h2&gt;
&lt;p&gt;The main result which is going to be discussed here is that if the &lt;script type=&quot;math/tex&quot;&gt;\mathbf{AC^0}&lt;/script&gt; circuit (polynomial sized &lt;a href=&quot;https://en.wikipedia.org/wiki/Boolean_circuit&quot;&gt;boolean circuits&lt;/a&gt; with constant depth, unbounded fan-in) which computes the parity function has size &lt;script type=&quot;math/tex&quot;&gt;\Omega(n^{log^k(n)})&lt;/script&gt;, then there exists an oracle &lt;script type=&quot;math/tex&quot;&gt;\mathbf{O}&lt;/script&gt; relative to which &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH^O} \subset \mathbf{PSPACE^O}&lt;/script&gt;. The paper also goes on to show that the parity function indeed requires a &lt;script type=&quot;math/tex&quot;&gt;\Omega(n^{log^k(n)})&lt;/script&gt; sized circuit to compute, but the proof shown in this paper is relatively complicated. I will probably do another post discussing an alternative proof, which uses Hastad’s Switching Lemma.&lt;/p&gt;

&lt;h2 id=&quot;complexity-theory-a-primer&quot;&gt;Complexity theory: a primer&lt;/h2&gt;

&lt;p&gt;As the name suggests, complexity theory is about the study of ‘complexity’ of problems. Problems like sorting, shortest path, travelling salesman, or SAT. So how do we define how ‘complex’ a problem is? We need a quantifiable measure, in order to compare it with other problems. One measure is the time taken to correctly compute the solution, given some input. But think about the variables involved here. Surely an algorithm which brute forces its way to the solution, when executed on a speedy brand new processor will execute in less time than a super efficient algorithm running on some 90s era Pentium chip? And what about the language in which we have written the algorithm in? And the compiler used? Would forgetting to specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;-O3&lt;/code&gt; flag during compilation somehow increase the complexity of the program, because it takes more time to execute?&lt;/p&gt;

&lt;p&gt;To ‘normalize’ away all these differences, we consider the number of steps taken by the ‘fastest, correct’ algorithm to be the time complexity of the problem. The number of steps required would be a function of the input size, which is usually some natural number, denoted by &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;. One way of looking at the input size is the number of bits required to completely specify the input for the problem.&lt;/p&gt;

&lt;p&gt;Also, intuitively one can deduce the fact that the number of steps required will increase as the input size increases. Which means we can represent the time complexity of problems using monotonically increasing functions.&lt;/p&gt;

&lt;p&gt;Complexity theory is more generally concerned with grouping problems of similar complexities together, so that it is easier to characterize them, and compare them with other problems. These groups are what we call complexity classes. One such class, referred to as &lt;script type=&quot;math/tex&quot;&gt;\mathbf{P}&lt;/script&gt;, includes all such problems having time complexity  which look like &lt;script type=&quot;math/tex&quot;&gt;n^2&lt;/script&gt;, or &lt;script type=&quot;math/tex&quot;&gt;n^3&lt;/script&gt;, or &lt;script type=&quot;math/tex&quot;&gt;n^4&lt;/script&gt;… multiplied by a fixed constant. Generally, this fixed constant is the normalization part, and is generally ignored while talking about a problem’s complexity. Another class, known as &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt;, is the class of efficiently ‘verifiable’ problems.&lt;/p&gt;

&lt;p&gt;For a better understanding of the &lt;script type=&quot;math/tex&quot;&gt;\mathbf{P}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt; classes, take a look at these &lt;a href=&quot;http://people.cs.georgetown.edu/~cnewport/teaching/cosc240-fall18/psets/complexity-notes.pdf&quot;&gt;lecture notes&lt;/a&gt; which cover them, and provide their formal definitions alongside.&lt;/p&gt;

&lt;p&gt;Note: One point which the notes don’t mention is that for every string in a language which belongs to &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt;, the corresponding certificate is of size polynomial in the string’s length.&lt;/p&gt;

&lt;h3 id=&quot;conp&quot;&gt;coNP&lt;/h3&gt;
&lt;p&gt;A language’s (say, &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;) complement (denoted by &lt;script type=&quot;math/tex&quot;&gt;\overline{L}&lt;/script&gt;) is the set of all strings which don’t belong to &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;. Suppose &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; is the set of all graphs (or more precisely, the binary representation of such graphs) which have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Vertex_cover&quot;&gt;vertex cover&lt;/a&gt; of size at most &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;. Then &lt;script type=&quot;math/tex&quot;&gt;\overline{L}&lt;/script&gt; consists of all strings other than those present in &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;. It will mostly contain binary strings which do not have a valid interpretation as a graph, and among the valid strings, the corresponding graphs will have vertex covers of size more than &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We say that &lt;script type=&quot;math/tex&quot;&gt;\overline{L}&lt;/script&gt; belongs to &lt;script type=&quot;math/tex&quot;&gt;\mathbf{coNP}&lt;/script&gt; if &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; belongs to  &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt;. The most famous example of a language in &lt;script type=&quot;math/tex&quot;&gt;\mathbf{coNP}&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;\overline{SAT}&lt;/script&gt;, which consists of all boolean formulae not having even a single satisfying assignment ((&lt;script type=&quot;math/tex&quot;&gt;x_1 \wedge \overline{x_1})&lt;/script&gt; being an example). Languages belonging to &lt;script type=&quot;math/tex&quot;&gt;\mathbf{coNP}&lt;/script&gt; don’t have a short certificate (that we know of) that provides a ‘proof of membership’, as in the case of &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt;. The formal definition of &lt;script type=&quot;math/tex&quot;&gt;\mathbf{coNP}&lt;/script&gt; is as follows:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \in L \iff \forall u \text{ } M(x, u) = 1&lt;/script&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; is a language belonging to &lt;script type=&quot;math/tex&quot;&gt;\mathbf{coNP}&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; is a variable meant to represent all possible certificates.&lt;/p&gt;

&lt;h3 id=&quot;pspace&quot;&gt;PSPACE&lt;/h3&gt;
&lt;p&gt;This complexity class encapsulates the problems which are solvable by a machine with a polynomial amount of space. There’s no restriction on the time taken to solve the problem, as long as the number of steps taken is finite. It is easy to see how this class encapsulates &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt;: simulate a verifier for the problem, cycle through all possible certificates (its length at most polynomial in the input size, so given an input of size &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, there exist at most &lt;script type=&quot;math/tex&quot;&gt;2^{p(n)}&lt;/script&gt; certificates, where &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; is some univariate polynomial), and in each cycle, feed the certificate and the input to the verfier. If the verifier accepts for a particular certificate, then accept. Else, if it cycles through all possible certificates and doesn’t accept on any of them, reject.&lt;/p&gt;

&lt;h3 id=&quot;polynomial-hierarchy-ph&quot;&gt;Polynomial Hierarchy (PH)&lt;/h3&gt;
&lt;p&gt;This class, often denoted by &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH}&lt;/script&gt;, encompasses those problems which the classes &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\mathbf{coNP}&lt;/script&gt; are unable to characterize. For instance, consider the &lt;script type=&quot;math/tex&quot;&gt;MAX-INDSET&lt;/script&gt; problem. Given a graph, an independent set is a subset of vertices such that no two vertices in the subset are adjacent to each other. The &lt;script type=&quot;math/tex&quot;&gt;MAX-INDSET&lt;/script&gt; problem is concerned with finding the largest independent set for a given graph.&lt;/p&gt;

&lt;p&gt;Now, consider the related decision problem. Note that the input has two parts: a description of graph G, and an integer k:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;INDSET = \{ \langle G, k \rangle: \text{G has an independent set of size at least k}\}&lt;/script&gt;

&lt;p&gt;There exists a short certificate for every valid solution to this problem, namely, the independent set itself. Verifying it is a simple matter of checking that it is of size at least &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, and that it forms an independent set, both of which can be done in polynomial time. Therefore this problem lies in &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We can go even further and devise a modification of this problem:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{EXACT-INDSET} = \{ \langle G, k \rangle: \text{The largest independent set (LIS) of G has size exactly k}\}&lt;/script&gt;

&lt;p&gt;It is not clear whether the definitions of &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP}&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\mathbf{coNP}&lt;/script&gt; are enough to characterize this problem. We can find another way to formulate the same problem, though:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\text{EXACT-INDSET} = \{ \langle G, k \rangle:&lt;/script&gt;
There exists an independent set of size k, and every subset which is of size more than k is not an independent set &lt;script type=&quot;math/tex&quot;&gt;\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;More formally, this can be written as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{EXACT-INDSET} = \{ x := \langle G, k \rangle: \exists u\text{ } \forall v \text{ s.t. } M(x, u, v) = 1 \}&lt;/script&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; represents the independent set of size &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; denotes a subset of vertices of size more than &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; is a function denoting a polynomial time Turing machine computation (it’s ok if you don’t know what a Turing Machine is, just think of it as a formal definition of an ordinary computer system).&lt;/p&gt;

&lt;p&gt;Now, we must ensure that &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;, given an input &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, along with &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; as defined, carries out a computation which captures the essence of the problem. This can be done if we configure &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; to compute the following things (note that all these operations can be done in polynomial time. This is important, the fact that M is a polynomial time machine: it’s where the complexity class derives its name from!) :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure that &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; is of size &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, and that it is indeed an independent set.&lt;/li&gt;
  &lt;li&gt;Similarly, ensure that &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; is of size more than &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, and that it is not an independent set.&lt;/li&gt;
  &lt;li&gt;If for a given &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;, the two conditions mentioned above are satisfied, then output &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;. Else, output zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can create another program which given input &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, and descriptions of the variables &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;, and a description of the behaviour of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;, will cycle through all possible combinations of &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;, running the machine &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; for each combination.  and if it finds a particular &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; such that when combined with all possible &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; outputs 1 every single time, then we have found our solution.&lt;/p&gt;

&lt;p&gt;Else, if the LIS isn’t of exactly of size &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, either of two cases are possible. The first case is that the LIS has size strictly lesser than &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;. In this event, the outer program won’t be able to find a suitable candidate for &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; at all, and the inner program will return zero each time. The second case is when the LIS has size strictly greater than &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, whereupon we are guaranteed that for some &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; corresponding to that LIS, and for some subset of &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; of size equal to &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, the inner computation will return zero. Thus we have defined a framework which completely characterizes the &lt;script type=&quot;math/tex&quot;&gt;EXACT-INDSET&lt;/script&gt; problem. (Note that I have used the terms program, computation and machine interchangeably).&lt;/p&gt;

&lt;p&gt;It turns out that that this framework is applicable to many problems, and we have a name for it: &lt;script type=&quot;math/tex&quot;&gt;\Sigma_2^p&lt;/script&gt;. The &lt;script type=&quot;math/tex&quot;&gt;\Sigma&lt;/script&gt; indicates that the first quantifier is existential, the &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; indicating that we use two quantifiers, and the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; simply saying that we are only using polynomial time computations (this does &lt;strong&gt;not&lt;/strong&gt; mean that the problem is computable in polynomial time! Observe that we use an &lt;em&gt;exponential number&lt;/em&gt; of polynomial time computations to characterize the input).&lt;/p&gt;

&lt;p&gt;We can define the class &lt;script type=&quot;math/tex&quot;&gt;\Pi_2^p&lt;/script&gt; similarly. For any language &lt;script type=&quot;math/tex&quot;&gt;L \in \Pi_2^p&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \in L \iff \{\forall u \text{ } \exists v \text{ s.t. } M(x, u, v) = 1 \}&lt;/script&gt;

&lt;p&gt;The sizes of variables associated with the quantifiers that we’ve defined up until this point (and will define later) are polynomial in the size of the input.&lt;/p&gt;

&lt;p&gt;An example of a problem in &lt;script type=&quot;math/tex&quot;&gt;\Pi_2^p&lt;/script&gt; is the &lt;script type=&quot;math/tex&quot;&gt;MIN-CNF&lt;/script&gt; problem: given a &lt;a href=&quot;https://en.wikipedia.org/wiki/Conjunctive_normal_form&quot;&gt;3-CNF&lt;/a&gt; boolean formula (each clause having three variables with two &lt;script type=&quot;math/tex&quot;&gt;OR&lt;/script&gt; operators, the clauses themselves acted upon by &lt;script type=&quot;math/tex&quot;&gt;AND&lt;/script&gt; operators), find an equivalent boolean formula having fewer clauses.&lt;/p&gt;

&lt;p&gt;This problem can be restated as follows: A 3-CNF boolean formula (more precisely, its string representation) lies in &lt;script type=&quot;math/tex&quot;&gt;MIN-CNF&lt;/script&gt; iff for every 3-CNF  boolean formula having more clauses, there exists an assignment of inputs for which the two formulas give different outputs (that is, the two formulas are not equivalent). It is easy to see that &lt;script type=&quot;math/tex&quot;&gt;MIN-CNF \in \Pi_2^p&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We can now generalize the notion of &lt;script type=&quot;math/tex&quot;&gt;\Pi_2^p&lt;/script&gt; and define the class &lt;script type=&quot;math/tex&quot;&gt;\Pi_i^p&lt;/script&gt;. For any language &lt;script type=&quot;math/tex&quot;&gt;L \in \Pi_i^p&lt;/script&gt;, the following holds:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \in L \iff \{\forall u_1 \text{ } \exists u_2 \text{ } \forall u_3 \ldots Q_i u_i \text{ s.t. } M(x, u_1, u_2, u_3, \ldots, u_i) = 1 \}&lt;/script&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;Q_i&lt;/script&gt; is an existential or a universal quantifier depending on whether &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; is even or odd. We can define &lt;script type=&quot;math/tex&quot;&gt;\Sigma_i^p&lt;/script&gt; in a similar manner. Note that the quantifiers are alternating with one another, because if we had two quantifiers of the same type adjacent to one another, it is always possible to combine them.&lt;/p&gt;

&lt;p&gt;The complexity classes generated by the generalizations have some very neat relationships among them (they apply to all &lt;script type=&quot;math/tex&quot;&gt;i&gt;0&lt;/script&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\Pi_i^p \subseteq \Pi_{i+1}^p&lt;/script&gt; (similarly for &lt;script type=&quot;math/tex&quot;&gt;\Sigma_{i}^p&lt;/script&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\Sigma_i^p \subseteq \Pi_{i+1}^p&lt;/script&gt; (similarly for &lt;script type=&quot;math/tex&quot;&gt;\Pi_{i}^p&lt;/script&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\Pi_i^p = co\Sigma_i^p&lt;/script&gt; (uses the fact that negation of an existential quantifier is a universal quantifier, and vice versa).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And finally, after all these definitions, we arrive at the complexity class we’ve all been waiting for!&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{PH} = \bigcup_{i} \Sigma_i^p = \bigcup_{i} \Pi_i^p&lt;/script&gt;

&lt;p&gt;Okay, that was a bit anti-climatic. But &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH}&lt;/script&gt; is an interesting class to study, as we shall soon see. The classes can be visualized in the form of a ladder. An arrow from a class &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; to class &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; indicates a containment (that is, &lt;script type=&quot;math/tex&quot;&gt;A \subseteq B&lt;/script&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Polynomial_time_hierarchy.svg/800px-Polynomial_time_hierarchy.svg.png&quot; alt=&quot;polynomial hierarchy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(&lt;script type=&quot;math/tex&quot;&gt;\Delta_i^p&lt;/script&gt; is just the intersection of &lt;script type=&quot;math/tex&quot;&gt;\Sigma_{i+1}^p&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\Pi_{i+1}^p&lt;/script&gt;, but we don’t need to be concerned with those.)&lt;/p&gt;

&lt;p&gt;The most amazing thing about &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH}&lt;/script&gt; is that we don’t know whether &lt;em&gt;any&lt;/em&gt; of these containments are strict or not (as I mentioned earlier, we are very bad at proving/disproving strict containments, and many believe we haven’t developed the requisite mathematical tools yet).&lt;/p&gt;

&lt;p&gt;We believe that all these containments are strict, for if it turns out that even one of the containments holds the other way as well (that is, both classes are one and the same), then the polynomial hierarchy ‘collapses’ to that level.&lt;/p&gt;

&lt;p&gt;Put more formally, it means that in the event that &lt;script type=&quot;math/tex&quot;&gt;\Sigma_{i+1}^p = \Sigma_i^p&lt;/script&gt; holds for some particular &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, then it would mean that &lt;script type=&quot;math/tex&quot;&gt;\Sigma_j^p = \Sigma_i^p&lt;/script&gt; for all &lt;script type=&quot;math/tex&quot;&gt;j&gt;i&lt;/script&gt; (similarly for &lt;script type=&quot;math/tex&quot;&gt;\Pi_i^p&lt;/script&gt;). In other words, the polynomial hierarchy collapses to level i. The other case where it would collapse is if &lt;script type=&quot;math/tex&quot;&gt;\Pi_i^p = \Sigma_i^p&lt;/script&gt; for some &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;It is unnatural that the polynomial hierarchy would collapse, since it definitely seems like we are getting more ‘power’ by adding more quantifiers. This is also one of the reasons why many believe that &lt;script type=&quot;math/tex&quot;&gt;\mathbf{P} \neq \mathbf{NP}&lt;/script&gt;, and that &lt;script type=&quot;math/tex&quot;&gt;\mathbf{NP} \neq \mathbf{coNP}&lt;/script&gt;.&lt;/p&gt;

&lt;h4 id=&quot;relationship-between-pspace-and-ph&quot;&gt;Relationship between PSPACE and PH&lt;/h4&gt;
&lt;p&gt;One would realize after a moment’s thought that &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH} \subseteq \mathbf{PSPACE}&lt;/script&gt;, because you only need a polynomial amount of space to simulate the Turing Machine denoted by ‘&lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;’ in the definitions, and a variable whose value you would toggle if a zero was outputted by one of the computations. Of course, as mentioned earlier, we don’t know whether this containment is strict or not.&lt;/p&gt;

&lt;h2 id=&quot;oracles&quot;&gt;Oracles&lt;/h2&gt;
&lt;p&gt;An Oracle Turing machine is a Turing machine with access to a certain oracle. Oracles are machines which solve the decision problem for some language &lt;script type=&quot;math/tex&quot;&gt;O&lt;/script&gt; in just a single computational step, no matter how computationally hard &lt;script type=&quot;math/tex&quot;&gt;O&lt;/script&gt; is (the oracle itself is denoted by &lt;script type=&quot;math/tex&quot;&gt;O&lt;/script&gt; too). At any point during its computation, a TM can write down a string and ask the oracle, ‘does this string lie in O?’, and get back an answer in the very next step. It can query the oracle as many times as it wants to, on any random string of its choosing.&lt;/p&gt;

&lt;p&gt;By the definition, it is obvious that the oracle gives the TM some additional power, and also that the oracle is just a ‘convenience’ which allows us to black box the hardness of computing any particular language, and that it does not have any real world analogues.&lt;/p&gt;

&lt;p&gt;A few more definitions before we get to the next section (where I actually start discussing the paper (!)): a language is denoted by &lt;script type=&quot;math/tex&quot;&gt;L^O&lt;/script&gt; if there is a TM with access to oracle &lt;script type=&quot;math/tex&quot;&gt;O&lt;/script&gt; which decides &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;. The complexity class &lt;script type=&quot;math/tex&quot;&gt;\mathbf{P^O}&lt;/script&gt; is defined as the set of all languages which can be decided by a polynomial time TM with access to oracle &lt;script type=&quot;math/tex&quot;&gt;O&lt;/script&gt;. The analogues to other complexity classes are defined in a similar manner.&lt;/p&gt;

&lt;p&gt;As a reminder, the goal of the paper that I’m discussing here is to give some evidence for the belief that &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH} \subset \mathbf{PSPACE}&lt;/script&gt;, and showing that &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH^O} \subset \mathbf{PSPACE^O}&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;O&lt;/script&gt; is some valid oracle, is one way of doing so, and this paper gives us such an oracle.&lt;/p&gt;

&lt;h2 id=&quot;train-of-thought&quot;&gt;Train of thought&lt;/h2&gt;
&lt;p&gt;We will first define a certain language which we’ll call &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; (the TM which decides this language has access to oracle A), and show that it lies in &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PSPACE^A}&lt;/script&gt;. Then we assume that &lt;script type=&quot;math/tex&quot;&gt;L^A \in \mathbf{PH^A}&lt;/script&gt;, which means that there’s a level &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; in the polynomial hierarchy in which &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; is contained (&lt;script type=&quot;math/tex&quot;&gt;L^A \in \Sigma_i^{p, A}&lt;/script&gt; for some &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;). Next, it is shown that given the previous assumption (&lt;script type=&quot;math/tex&quot;&gt;L^A \in \mathbf{PH^A}&lt;/script&gt;), there must exist a &lt;script type=&quot;math/tex&quot;&gt;O(polylog(n))&lt;/script&gt; circuit computing the parity function.&lt;/p&gt;

&lt;p&gt;But this is where it gets interesting! The second part of the paper (which I won’t be discussing) proves that a &lt;script type=&quot;math/tex&quot;&gt;O(polylog(n))&lt;/script&gt; sized parity-computing circuit doesn’t exist, which means &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; is not in &lt;script type=&quot;math/tex&quot;&gt;\Sigma_i^{p, A}&lt;/script&gt; for any &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, which means &lt;script type=&quot;math/tex&quot;&gt;L^A \not\in \mathbf{PH^A}&lt;/script&gt;. Thus, we will have proved that &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH^A} \subset \mathbf{PSPACE^A}&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;first-step-defining-la&quot;&gt;First Step: Defining &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt;&lt;/h2&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L^A = \{1^n | \text{Number of n-length strings in A is odd}\}&lt;/script&gt;

&lt;p&gt;Assume &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; to be some language. The language &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; is defined relative to the strings present in &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;. It only happens to contain at most one string of any given length, and if it does happen to contain a certain string of length &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, then it will be made up of all ones. What is the condition under which &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; will contain an &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length, all-ones string? Only when the language A has an odd number of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length strings in it.&lt;/p&gt;

&lt;p&gt;Right away, by looking at the definition of &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt;, it seems obvious that it has some connection to the parity function. In fact, it has been defined such that it has this connection, which we’ll exploit later. What’s also obvious is that this language exists in &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PSPACE^A}&lt;/script&gt;. Consider the following procedure: upon being given a &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length string, proceed further only if it is an all-ones string (reject if not). Then, simply query oracle A all possible &lt;script type=&quot;math/tex&quot;&gt;2^n&lt;/script&gt; strings of length &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, and accept only if the number is odd. All this can easily be done by a TM having space polynomial in the size of input.&lt;/p&gt;

&lt;h2 id=&quot;second-step-showing-existence-of-an-opolylogn-sized-parity-computing-circuit&quot;&gt;Second Step: Showing existence of an &lt;script type=&quot;math/tex&quot;&gt;O(polylog(n))&lt;/script&gt; sized parity-computing circuit&lt;/h2&gt;
&lt;p&gt;We’ll be showing this under the assumption that &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH^A}&lt;/script&gt;. As stated above, this implies that &lt;script type=&quot;math/tex&quot;&gt;L^A \in \Sigma_i^{p, A}&lt;/script&gt;. This means that:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \in L^A \iff \{ \exists y_1 \forall y_2 \ldots Q_iy_i s.t. M^A(y_1, y_2, \ldots , y_i, x) = 1\}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt; is a TM with the modification that is has access to oracle A. Next, we claim that:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;M^A(y_1, y_2, ... y_i, x) = \exists r \forall s \overline{M^A}(y_1, y_2, ... y_i, r, s, x)&lt;/script&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; is similar to &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt;, but with two modifications: one, it can only make one oracle query (&lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt;, of course, can make a polynomial number of queries to the oracle), and two, it has two additional inputs. Note the trade off here: &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; is ‘equal’ in power to &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt;, even though the number of queries which can be asked has been restricted. This is because we have now ‘ascended’ two levels higher in the polynomial hierarchy. But why should the trade-off be true?&lt;/p&gt;

&lt;p&gt;To see this, consider the machine &lt;script type=&quot;math/tex&quot;&gt;M^O&lt;/script&gt;, whose computations are identical in nature to &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt;, except that we can swap in any oracle we want. Now fix an input &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, along with some valid combination of &lt;script type=&quot;math/tex&quot;&gt;y_1, ... y_i&lt;/script&gt;, and then think of the computation of a certain TM &lt;script type=&quot;math/tex&quot;&gt;M^O&lt;/script&gt; in the following manner: Each time the TM enters into a state where it queries the oracle, it can end up in one of two states, depending upon the oracle (or, more precisely, its answer to that query). Therefore, if we decide that we want to ‘track’ all possible ‘computational paths’ down which the TM might go, we will notice that we get a binary tree. Each path will correspond to a different oracle. Furthermore, as long as the inputs are fixed, the computational path taken by the TM is wholly dependent on the responses of the oracle (think about why this is true).&lt;/p&gt;

&lt;p&gt;Now, suppose we fix an input &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; which is in &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt;, and also some combination of &lt;script type=&quot;math/tex&quot;&gt;y_1, ..., y_i&lt;/script&gt;, which automatically fixes a corresponding computation graph for &lt;script type=&quot;math/tex&quot;&gt;M^O&lt;/script&gt;. Recalling the definition of &lt;script type=&quot;math/tex&quot;&gt;\Sigma_i^{p, A}&lt;/script&gt;, we can see that &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt; must output &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; no matter what &lt;script type=&quot;math/tex&quot;&gt;y_1, ..., y_i&lt;/script&gt; we have chosen. Therefore, since we now know that there exists at least one oracle for which &lt;script type=&quot;math/tex&quot;&gt;M^O&lt;/script&gt; outputs 1, we can be sure that there exists a branch in the graph whose query-response pairs at each ‘branching’ matches the response of oracle A, when it is queried that particular query. This branch is the exact branch taken by &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt;. Additionally, the state at the end of the path will be an accepting one.&lt;/p&gt;

&lt;p&gt;Now, it is easier to see how the two machines are equivalent. Take ‘&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;’ to be an accepting path, which is characterized by a sequence of query-response pairs, and allow ‘&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;’ to range over all possible queries. Therefore, given a particular &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;, what &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; will do is it will simulate &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt;, and each time it reaches a point where it has to query the oracle, it just uses the corresponding response from the sequence represented by ‘&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;’. In case the query matches the query represented by ‘&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;’, &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; will actually query the oracle and indeed verify that the query-response pair is indeed right. If the response does not match the one given by the oracle, then the machine rejects (this is the only case where &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; will reject, and if &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; does not belong to &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt;, there will be an incorrect query response pair in ‘&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;’, and a corresponding query ‘&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;’, so &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; will reject when it comes to that ‘&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;’). Stepping back, it is easy to see that if &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; actually belongs to &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; will, by iterating through all possible queries, chance upon each query specified in the sequence represented by ‘&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;’, and will verify the whole sequence correctly.&lt;/p&gt;

&lt;p&gt;A thing to note here is that &lt;script type=&quot;math/tex&quot;&gt;\exists r \text{ } \forall s \overline{M^A}(y_1, y_2, ... y_i, r, s, x)&lt;/script&gt; is equivalent to &lt;script type=&quot;math/tex&quot;&gt;\forall s \text{ } \exists r \overline{M^A}(y_1, y_2, ... y_i, r, s, x)&lt;/script&gt; since the variables ‘&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;’ and ‘&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;’ are unrelated to each other. Also note that this switching is not possible in every case. For example, the &lt;script type=&quot;math/tex&quot;&gt;MIN-CNF&lt;/script&gt; problem described above, lies in &lt;script type=&quot;math/tex&quot;&gt;\Pi_2^p&lt;/script&gt;, but does not lie in &lt;script type=&quot;math/tex&quot;&gt;\Sigma_2^p&lt;/script&gt; (at least, we don’t know that it does), because switching the variables is not possible in this case.&lt;/p&gt;

&lt;p&gt;We are in a position to go a step further and claim that &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; in fact lies in &lt;script type=&quot;math/tex&quot;&gt;\Sigma_{i+1}^{p,A}&lt;/script&gt; (with regards to the &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; machine, that is. It is trivially in  &lt;script type=&quot;math/tex&quot;&gt;\Sigma_{i+1}^{p,A}&lt;/script&gt; for the &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt; machine). Depending upon whether &lt;script type=&quot;math/tex&quot;&gt;Q_i&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;\forall&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\exists&lt;/script&gt;, we replace &lt;script type=&quot;math/tex&quot;&gt;M^A(...)&lt;/script&gt; with the equivalent &lt;script type=&quot;math/tex&quot;&gt;\forall s \text{ } \exists r \text{ } \overline{M^A}(...)&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\exists r \text{ } \forall s \text{ } \overline{M^A}(...)&lt;/script&gt; version, and then the two consecutive universal (or existential) quantifiers can be merged into one.&lt;/p&gt;

&lt;p&gt;We are now almost ready to construct the parity-computing circuit, we just need a couple of things in order.&lt;/p&gt;

&lt;p&gt;First, think of the following NP statement:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \in L \iff \exists y \text{ } M(x, y) = 1&lt;/script&gt;

&lt;p&gt;This can be thought of as (I hope you will forgive me for the bad drawings that follow!):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../assets/img/exists.png&quot; alt=&quot;NP circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where the &lt;script type=&quot;math/tex&quot;&gt;\exists&lt;/script&gt; node acts like the OR gate, outputting &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; only when at least one of &lt;script type=&quot;math/tex&quot;&gt;M(x, y_i)&lt;/script&gt; evaluates to &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;. You can think of a similar construction for coNP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../assets/img/forall.png&quot; alt=&quot;coNP circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A construction for &lt;script type=&quot;math/tex&quot;&gt;\Sigma_2^p&lt;/script&gt; will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../assets/img/composite.png&quot; alt=&quot;Sigma_p2 circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, extending this concept a bit further, we can think of any &lt;script type=&quot;math/tex&quot;&gt;\Sigma_i^p&lt;/script&gt; computation as a tree of nodes, with the levels alternating between &lt;script type=&quot;math/tex&quot;&gt;\exists&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\forall&lt;/script&gt;. Each of the leaves would then correspond to a computation, with the inputs as some particular combination of &lt;script type=&quot;math/tex&quot;&gt;y_1,...y_n&lt;/script&gt;. It is quite easy to see that the construction outputs &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; if and only if &lt;script type=&quot;math/tex&quot;&gt;\exists y_1... M^A(y_1, ..)&lt;/script&gt; evaluates to true.&lt;/p&gt;

&lt;p&gt;Now, consider the &lt;script type=&quot;math/tex&quot;&gt;\Sigma_{i+1}^p&lt;/script&gt; computation where we use &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}(y_1, y_2, ..., y_{i+1}, x)&lt;/script&gt;. Each particular computation’s output, it turns out, can be associated with the response of the query it makes to the oracle during the course of its computation (Remember, &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}&lt;/script&gt; only makes a single query).&lt;/p&gt;

&lt;p&gt;The query made to the oracle is one of &lt;script type=&quot;math/tex&quot;&gt;\approx 2^n&lt;/script&gt; possible queries, which can be denoted by &lt;script type=&quot;math/tex&quot;&gt;q_1, q_2, ..., q_{2^n}&lt;/script&gt;, and their corresponding responses by &lt;script type=&quot;math/tex&quot;&gt;r_1, r_2, ..., r_{2^n}&lt;/script&gt;. Suppose during computing &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}(y_1, y_2, ..., y_{i+1}, x)&lt;/script&gt;, the machine queries the oracle for &lt;script type=&quot;math/tex&quot;&gt;q_j&lt;/script&gt; and receives &lt;script type=&quot;math/tex&quot;&gt;r_j&lt;/script&gt; as response. Since the output of &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}(y_1, y_2, ..., y_{i+1}, x)&lt;/script&gt; and the quantity &lt;script type=&quot;math/tex&quot;&gt;r_j&lt;/script&gt; are both boolean variables, either one of &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}(y_1, y_2, ..., y_{i+1}, x) = r_j&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\overline{M^A}(y_1, y_2, ..., y_{i+1}, x) = \overline{r_j}&lt;/script&gt; holds true.&lt;/p&gt;

&lt;p&gt;It follows that we can label the leaves of the computation tree with &lt;script type=&quot;math/tex&quot;&gt;r_j&lt;/script&gt; (or &lt;script type=&quot;math/tex&quot;&gt;\overline{r_j}&lt;/script&gt;) now (note that this does not mean that the construction only has &lt;script type=&quot;math/tex&quot;&gt;\approx 2^n&lt;/script&gt; leaves. In fact, the number of leaves far exceeds that number). Now, by having an understanding of how we can construct a ‘&lt;script type=&quot;math/tex&quot;&gt;\forall\exists&lt;/script&gt; circuit’, and knowing that the particular construction we created outputs &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; only when the number of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length strings in A is odd, and by modifying the circuit by replacing every &lt;script type=&quot;math/tex&quot;&gt;\forall&lt;/script&gt; node with an &lt;script type=&quot;math/tex&quot;&gt;AND&lt;/script&gt; gate, every &lt;script type=&quot;math/tex&quot;&gt;\exists&lt;/script&gt; node with an &lt;script type=&quot;math/tex&quot;&gt;OR&lt;/script&gt; gate, we get a circuit which computes the parity of the &lt;script type=&quot;math/tex&quot;&gt;2^n&lt;/script&gt; bits represented by the bits (&lt;script type=&quot;math/tex&quot;&gt;r_j&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\overline{r_j}&lt;/script&gt;) at the leaves of the circuit.&lt;/p&gt;

&lt;p&gt;Going the other way, we can look at it as follows: Given &lt;script type=&quot;math/tex&quot;&gt;2^n&lt;/script&gt; input bits (if the number of bits in the input isn’t a power of &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;, pad it with zeroes. The parity value won’t change!), label them as &lt;script type=&quot;math/tex&quot;&gt;r_1, r_2, ..., r_{2^n}&lt;/script&gt;. Now arrange all the &lt;script type=&quot;math/tex&quot;&gt;2^n&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length strings in lexicographical order, and add the &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;th string to a set if &lt;script type=&quot;math/tex&quot;&gt;r_i = 1&lt;/script&gt;. This set is now the language &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;. Therefore, &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; will contain &lt;script type=&quot;math/tex&quot;&gt;1^n&lt;/script&gt; only if parity of the input bits is equal to 1, and everything else follows. It might be the most convoluted way ever to calculate parity, but it works.&lt;/p&gt;

&lt;p&gt;One other useful thing of note is that during the computation of &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt; has to decide whether or not a given &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is present in &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; or not, it will query the oracle of every possible &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length string, &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; being the length of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. How do we know this? Because of how &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; is defined, the inclusion of string &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; in it depends upon the fact that it is completely made up of ones, and that an odd number of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length strings are present in A. Therefore, since &lt;script type=&quot;math/tex&quot;&gt;M^A&lt;/script&gt; does not have any ‘built-in’ knowledge of language A, and because of the fact that it can only know anything all about A is by querying the oracle, and because if the machine misses out on querying even a single &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-length string it may give the wrong answer, it has no choice but to query every possible string. For those in the know, this is a consequence of the fact that the communication complexity of the parity function is &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The only thing left to do is to derive the size of the circuit. Since every variable &lt;script type=&quot;math/tex&quot;&gt;y_i&lt;/script&gt; is of length at most polynomial in &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, assume it is of length at most &lt;script type=&quot;math/tex&quot;&gt;n^k&lt;/script&gt;, for some &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;. Then, it follows that every internal node must have &lt;script type=&quot;math/tex&quot;&gt;2^{n^k}&lt;/script&gt; children, one for each possible value of &lt;script type=&quot;math/tex&quot;&gt;y_i&lt;/script&gt;. Using this, the size of the circuit comes out to be &lt;script type=&quot;math/tex&quot;&gt;O(2^{n(log^k(2^n))})&lt;/script&gt;. Since we are using a &lt;script type=&quot;math/tex&quot;&gt;2^n&lt;/script&gt; sized string as input, if we replace &lt;script type=&quot;math/tex&quot;&gt;2^n&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;n'&lt;/script&gt;, we have an &lt;script type=&quot;math/tex&quot;&gt;O(n'^{(log^k(n'))})&lt;/script&gt; sized circuit for computing parity.&lt;/p&gt;

&lt;p&gt;This proof not just proves the existence of a &lt;script type=&quot;math/tex&quot;&gt;O(n^{log^k(n)})&lt;/script&gt; sized circuit for computing the parity of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; bits, but gives details for constructing one as well. Of course, this is under the assumption that &lt;script type=&quot;math/tex&quot;&gt;L^A&lt;/script&gt; lies in &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH^A}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The second section of the paper essentially proves the contrapositive of the above statement. It shows that a &lt;script type=&quot;math/tex&quot;&gt;O(n^{log^k(n)})&lt;/script&gt; sized circuit for computing parity of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; bits does not exist, thus &lt;script type=&quot;math/tex&quot;&gt;L^A \not\in \mathbf{PH^A}&lt;/script&gt;, proving the existence of an oracle relative to which &lt;script type=&quot;math/tex&quot;&gt;\mathbf{PH} \subset \mathbf{PSPACE}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;There are a few additional implications about the second result in the paper, like multiplication and the majority function don’t lie in &lt;script type=&quot;math/tex&quot;&gt;AC^0&lt;/script&gt; as well, but the most significant implication, by far, is the one discussed above.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Oracle separations are an interesting way to glean evidence about things which we have no idea how tackle, given the available tools. A much more recent oracle separation was shown by &lt;a href=&quot;https://engineering.princeton.edu/faculty/ran-raz&quot;&gt;Ran Raz&lt;/a&gt; and &lt;a href=&quot;http://www.avishaytal.org/&quot;&gt;Avishay Tal&lt;/a&gt; in 2018, between &lt;a href=&quot;https://en.wikipedia.org/wiki/BQP&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;BQP&lt;/script&gt;&lt;/a&gt; and &lt;script type=&quot;math/tex&quot;&gt;PH&lt;/script&gt; (it showed &lt;script type=&quot;math/tex&quot;&gt;BQP^A \not\subset PH^A&lt;/script&gt;, which is surprising enough in its own right).&lt;/p&gt;</content><author><name>Paul Le</name></author><summary type="html">Introduction An important aspect of complexity theory is to try and find separations between different complexity classes. That is, to show that two complexity classes are not equal. One type of separation is a strict containment. It turns out that it is easier to prove containments (for example, give two complexity classes and , to show that , or the opposite, whichever one is true) but to show a strict containment () is more difficult ( vs being the best example of this). Obviously, a strict containment implies a separation between the two classes, but a containment doesn’t.</summary></entry><entry><title type="html">Off main thread HTML parsing in Servo</title><link href="http://localhost:4000/blog/async-html-parsing-in-servo.html" rel="alternate" type="text/html" title="Off main thread HTML parsing in Servo" /><published>2017-08-24T00:11:57+05:30</published><updated>2017-08-24T00:11:57+05:30</updated><id>http://localhost:4000/blog/async-html-parsing-in-servo</id><content type="html" xml:base="http://localhost:4000/blog/async-html-parsing-in-servo.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Traditionally, browsers have been written as single threaded applications, and the html spec certainly seems
to validate this statement. This makes it difficult to parallelize any task which a browser carries out, and
we generally have to come up with innovative ways to do so.&lt;/p&gt;

&lt;p&gt;One such task is HTML parsing, and I have been working on parallelizing it this summer as part of my GSoC
project. Since Servo is written in Rust, I’m assuming the reader has some basic knowledge about Rust.
If not, check out this awesome &lt;a href=&quot;https://doc.rust-lang.org/book/second-edition/&quot;&gt;Rust book&lt;/a&gt;. Done? Let’s dive straight into the details:&lt;/p&gt;

&lt;h3 id=&quot;html-parser&quot;&gt;HTML Parser&lt;/h3&gt;
&lt;p&gt;Servo’s HTML (and XML) parsing code live in &lt;a href=&quot;https://github.com/servo/html5ever&quot;&gt;html5ever&lt;/a&gt;. Since this project concerns HTML parsing, I will only be talking about that. The first component we need to know about is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tokenizer&lt;/code&gt;. This component is responsible for taking in raw input from a buffer and creating tokens, eventually sending them to its Sink, which we will call &lt;code class=&quot;highlighter-rouge&quot;&gt;TokenSink&lt;/code&gt;. This could be any type which implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;TokenSink&lt;/code&gt; trait.&lt;/p&gt;

&lt;p&gt;html5ever has a type called &lt;code class=&quot;highlighter-rouge&quot;&gt;TreeBuilder&lt;/code&gt;, which implements this trait. The TreeBuilder’s job is to create tree operations based on the tokens it receives. TreeBuilder contains its own Sink, called &lt;a href=&quot;https://doc.servo.org/markup5ever/interface/tree_builder/trait.TreeSink.html&quot;&gt;TreeSink&lt;/a&gt;, which details the methods corresponding to these tree ops. The TreeBuilder calls these &lt;code class=&quot;highlighter-rouge&quot;&gt;TreeSink&lt;/code&gt; methods under appropriate conditions, and these ‘action methods’ are responsible for constructing the DOM tree.&lt;/p&gt;

&lt;p&gt;With me so far? Good. The key to parallelizing HTML parsing is realizing that the task of creating tree ops is independent from the task of &lt;em&gt;actually&lt;/em&gt; executing them to construct the DOM tree. Therefore, tokenization and tree op creation can happen on a separate thread, while the tree construction can be done on the main thread itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../assets/img/parsing_diagram.png&quot; alt=&quot;Example image&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-process&quot;&gt;The Process&lt;/h3&gt;
&lt;p&gt;The first step I took was to decouple tree op creation from tree construction. Previously, tree ops were executed as soon as they were created. This involved the creation of a new &lt;a href=&quot;https://github.com/servo/servo/blob/master/components/script/dom/servoparser/async_html.rs#L512&quot;&gt;TreeSink&lt;/a&gt;, which instead of executing them directly, created a &lt;a href=&quot;https://github.com/servo/servo/blob/master/components/script/dom/servoparser/async_html.rs#L59-L105&quot;&gt;representation&lt;/a&gt; of a tree op, containing all relevant data. For the time being, I sent the tree op to a &lt;code class=&quot;highlighter-rouge&quot;&gt;process_op&lt;/code&gt; function as soon as it was created, whereupon it was executed.&lt;/p&gt;

&lt;p&gt;Now that these two processes were independent, my next task consisted of creating a new thread, where the Tokenizer+TreeBuilder pair would live, to generate these tree ops. Now, when a tree op was created, it would be sent to the main thread, and control would return back to the TreeBuilder. The TreeBuilder does not have to wait for the execution of the tree op anymore, thus speeding up the entire process.&lt;/p&gt;

&lt;p&gt;So far so good. The final task in this project was to implement speculative parsing, by building on top of these recent changes.&lt;/p&gt;

&lt;h3 id=&quot;speculative-parsing&quot;&gt;Speculative Parsing&lt;/h3&gt;
&lt;p&gt;The HTML spec dictates that at any point during parsing, if we encounter a script tag, then the script must be executed immediately (if it is an inline script), or must be fetched and then executed (note that this rule does not apply to &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; scripts). Why, you might ask, must this be done so? Why can’t we mark these scripts and execute them all at the end, after the parsing is done? This is because of an old, ill-thought out &lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt; API function called &lt;code class=&quot;highlighter-rouge&quot;&gt;document.write()&lt;/code&gt;. This function is a pain point for many developers who work on browsers, as it is a real headache implementing it well enough, while working around the many idiosyncrasies which surround it. I won’t dive into the details here, as they are not relevant. All we need to know is what &lt;code class=&quot;highlighter-rouge&quot;&gt;document.write()&lt;/code&gt; does: it takes a string argument, which is generally markup, and inserts this string as part of the document’s HTML content. It is suffice to say that using this function might break your page, and should not be used.&lt;/p&gt;

&lt;p&gt;Returning to the parsing task, we can’t commit any DOM manipulations until the script finishes executing, because &lt;code class=&quot;highlighter-rouge&quot;&gt;document.write()&lt;/code&gt; could make them redundant. What speculative parsing aims to do is to continue parsing the content after the script tag in the parser thread, while the script is being executed in the main thread. Note that we are only speculatively creating tree ops here, not the actual tree construction. After the script finishes executing, we analyze the actions of the &lt;code class=&quot;highlighter-rouge&quot;&gt;document.write()&lt;/code&gt; calls (if any) to determine whether to use the tree ops, or to throw them away.&lt;/p&gt;

&lt;h3 id=&quot;roadblock&quot;&gt;Roadblock!&lt;/h3&gt;
&lt;p&gt;Remember when I said the process of creating tree ops is independent from tree construction? Well, I lied a little. Until a week ago, we need access to some DOM nodes for the creation of a couple of tree actions (one method needed to know if a node had a parent, and the other needed to know whether two nodes existed in the same tree). When I moved the task of creating tree ops to a separate thread, I could no longer access the DOM tree, which lived on the main thread. So I used a &lt;code class=&quot;highlighter-rouge&quot;&gt;Sender&lt;/code&gt; on the TreeSink to create and send &lt;a href=&quot;https://github.com/servo/servo/pull/17565/files#diff-10b46cb1e26142d2058e291de25bd4c7R133&quot;&gt;queries&lt;/a&gt; to the main thread, which would access the DOM and send the results back. Then only would the TreeSink method return, with the data it received from the main thread. Additionally, this meant that these couple of methods were synchronous in nature. No biggie.&lt;/p&gt;

&lt;p&gt;I realized the problem when I sat down to think about how I would implement speculative parsing. Since the main thread is busy executing scripts, it won’t be listening to the queries these synchronous methods will be sending, and therefore the task of creating tree ops cannot progress further!&lt;/p&gt;

&lt;p&gt;This turned out to be a bigger problem than I’d imagined, and I also had to sift through the equivalent Gecko code to understand how this situation was handled. I eventually came up with a good solution, but I won’t bore you with the details. If you want to know more, here’s a &lt;a href=&quot;https://gist.github.com/cynicaldevil/09fb8a6dd1db58852d2085ac59ca0f9b&quot;&gt;gist&lt;/a&gt; explaining the solution.&lt;/p&gt;

&lt;p&gt;With these changes landed in html5ever, I can finally implement speculative parsing. Unfortunately, there’s not much time to implement it as a part of the GSoC project, so I will be landing this feature in Servo some time later. I hope to publish another blog post describing it thoroughly, along with details on the performance improvements this feature would bring.&lt;/p&gt;

&lt;h4 id=&quot;links-to-important-prs&quot;&gt;Links to important PRs:&lt;/h4&gt;
&lt;p&gt;Added Async HTML Tokenizer: &lt;a href=&quot;https://github.com/servo/servo/pull/17037&quot;&gt;https://github.com/servo/servo/pull/17037&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run the async HTML Tokenizer on a new thread: &lt;a href=&quot;https://github.com/servo/servo/pull/17914&quot;&gt;https://github.com/servo/servo/pull/17914&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TreeBuilder no longer relies on &lt;code class=&quot;highlighter-rouge&quot;&gt;same_tree&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;has_parent_node&lt;/code&gt;: &lt;a href=&quot;https://github.com/servo/html5ever/pull/300&quot;&gt;https://github.com/servo/html5ever/pull/300&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;End TreeBuilder’s reliance on DOM: &lt;a href=&quot;https://github.com/servo/servo/pull/18056&quot;&gt;https://github.com/servo/servo/pull/18056&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a really fun project; I got to solve lots of cool problems, and also learnt a lot more about how a modern, spec-compliant rendering engine works.&lt;/p&gt;

&lt;p&gt;I would like to thank my mentor &lt;a href=&quot;https://twitter.com/nokusu&quot;&gt;Anthony Ramine&lt;/a&gt;, who was absolutely amazing to work with, and &lt;a href=&quot;https://twitter.com/lastontheboat&quot;&gt;Josh Matthews&lt;/a&gt;, who helped me a lot when I was still a rookie looking to contribute to the project.&lt;/p&gt;</content><author><name>Paul Le</name></author><summary type="html">Introduction Traditionally, browsers have been written as single threaded applications, and the html spec certainly seems to validate this statement. This makes it difficult to parallelize any task which a browser carries out, and we generally have to come up with innovative ways to do so.</summary></entry></feed>